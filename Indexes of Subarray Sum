//Given an unsorted array arr of size n that contains only non negative integers, find a sub-array (continuous elements) that has sum equal to s. 
You mainly need to return the left and right indexes(1-based indexing) of that subarray.
//In case of multiple subarrays, return the subarray indexes which come first on moving from left to right. If no such subarray exists return an array consisting of element -1.

 vector<int> subarraySum(vector<int> arr, int n, long long s) {
        // Your code here
        int j=0;
        long long sum=0;
        vector<int> ans;
        for(int i=0;i<n;i++)
        {
            sum+=arr[i];
            while(sum>s&&j<i)
            {
                sum-=arr[j];
                j++;
            }
            if(sum==s)
            {
            ans.push_back(j+1);
            ans.push_back(i+1);
            break;
            }
        
        }
            if(ans.size() == 0){
         return {-1};
     }
          return ans;
        
        
        
        
    }
